include(CMakeFindDependencyMacro)

macro(find_package_dependency)

  # When loading the *Config.cmake we should
  # call find_dependency which is just a wrapper
  # around find_package to display better
  # messages to the user. When directly dealing
  # with our CMakeLists.txt, we should call
  # find_package directly
  if(FROM_CONFIG_FILE)
     find_dependency(${ARGN})
  else()
     find_package(${ARGN})
  endif()

endmacro()

# =========================
# == PUBLIC DEPENDENCIES ==
# =========================

# if(NOT TARGET ONBINGS::onbings-somelib)
#   find_package_dependency(onbings-somelib REQUIRED)
# endif()

# ==========================
# == PRIVATE DEPENDENCIES ==
# ==========================

#find_package_dependency(Qt5 REQUIRED Core Gui Widgets)

# if(NOT TARGET ONBINGS::onbings-anotherlib)
#   find_package_dependency(onbings-anotherlib REQUIRED)
# endif()

if(NOT TARGET jsoncpp_object)
  find_package_dependency(jsoncpp REQUIRED)

  if(TARGET jsoncpp_lib)
    add_library(jsoncpp::jsoncpp ALIAS jsoncpp_lib)
  elseif(TARGET jsoncpp_static)
    add_library(jsoncpp::jsoncpp ALIAS jsoncpp_static)
  else()
    message(FATAL_ERROR "Unknown target for jsoncpp")
  endif()
endif()

find_package_dependency(spdlog REQUIRED)
find_package_dependency(fmt REQUIRED)
find_package_dependency(libyuv REQUIRED)
find_package_dependency(ZLIB REQUIRED)
find_package_dependency(ZenLib REQUIRED)
find_package_dependency(MediaInfoLib REQUIRED)
find_package_dependency(date REQUIRED)
find_package_dependency(OpenSSL REQUIRED)


#  find_package_dependency(linenoise-ng REQUIRED)
# if(NOT TARGET Freetype)
#   find_package_dependency(Freetype REQUIRED)
# endif()

#find_path(STB_INCLUDE_DIRS "stb_image.h")
##target_include_directories(main PRIVATE ${STB_INCLUDE_DIRS})
#message("===STB_INCLUDE_DIRS===========>" ${STB_INCLUDE_DIRS})
#find_path( AVCODEC_INCLUDE_DIR libavcodec/avcodec.h )
#find_library( AVCODEC_LIBRARY avcodec )
#message("===AVCODEC_INCLUDE_DIR===========>" ${AVCODEC_INCLUDE_DIR})
#message("===AVCODEC_LIBRARY===========>" ${AVCODEC_LIBRARY})

## {
##   "name": "bofstd",
##   "version": "5.1.15.27",
##   "description": "The onbings general purpose C++ Multiplatform library",
##   "dependencies": [
##     { "name": "czmq" },
##     { "name": "date" },
##     { "name": "ffmpeg" },
##     { "name": "fmt" },
##     { "name": "freetype" },
##     { "name": "gtest" },
##     { "name": "jsoncpp" },
##     { "name": "libmediainfo" },
##     { "name": "libyuv" },
##     { "name": "libzen" },
##     { "name": "linenoise-ng" },
##     { "name": "openssl" },
##     { "name": "stb" },
##     { "name": "spdlog" },
##     { "name": "zeromq" },
##     { "name": "zlib" }
##   ]
## }

## 1>The package zeromq provides CMake targets:
## 1>
## 1>    find_package(ZeroMQ CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE libzmq libzmq-static)
## 1>
## 1>The package czmq provides CMake targets:
## 1>
## 1>    find_package(czmq CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE czmq czmq-static)
## 1>
## 1>The package date provides CMake targets:
## 1>
## 1>    find_package(date CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE date::date date::date-tz)
## 1>
## 1>The package fmt provides CMake targets:
## 1>
## 1>    find_package(fmt CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE fmt::fmt)
## 1>
## 1>    # Or use the header-only version
## 1>    find_package(fmt CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE fmt::fmt-header-only)
## 1>
## 1>The package zlib is compatible with built-in CMake targets:
## 1>
## 1>    find_package(ZLIB REQUIRED)
## 1>    target_link_libraries(main PRIVATE ZLIB::ZLIB)
## 1>
## 1>The package freetype provides CMake targets:
## 1>
## 1>    find_package(freetype CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE freetype)
## 1>
## 1>The package gtest provides CMake targets:
## 1>
## 1>    find_package(GTest CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE GTest::gmock GTest::gtest GTest::gmock_main GTest::gtest_main)
## 1>
## 1>The package jsoncpp provides CMake targets:
## 1>
## 1>    find_package(jsoncpp CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE jsoncpp_lib jsoncpp_object JsonCpp::JsonCpp)
## 1>
## 1>The package libzen provides CMake targets:
## 1>
## 1>    find_package(ZenLib CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE zen)
## 1>
## 1>The package libmediainfo provides CMake targets:
## 1>
## 1>    find_package(MediaInfoLib CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE mediainfo)
## 1>
## 1>The package libyuv provides CMake targets:
## 1>
## 1>    find_package(libyuv CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE yuv)
## 1>
## 1>The package openssl is compatible with built-in CMake targets:
## 1>
## 1>    find_package(OpenSSL REQUIRED)
## 1>    target_link_libraries(main PRIVATE OpenSSL::SSL OpenSSL::Crypto)
## 1>
## 1>The package spdlog provides CMake targets:
## 1>
## 1>    find_package(spdlog CONFIG REQUIRED)
## 1>    target_link_libraries(main PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
## 1>
## 1>The package stb is header only and can be used from CMake via:
## 1>
## 1>    find_path(STB_INCLUDE_DIRS "stb_c_lexer.h")
## 1>    target_include_directories(main PRIVATE ${STB_INCLUDE_DIRS})
## 1>
## The package asio provides CMake targets:
##
##    find_package(asio CONFIG REQUIRED)
##    target_link_libraries(main PRIVATE asio asio::asio)
## 1>===STB_INCLUDE_DIRS===========>C:/bld/bofstd/vcpkg_installed/evs-x64-swx-windows-dynamic/include
## 1>===AVCODEC_INCLUDE_DIR===========>C:/bld/bofstd/vcpkg_installed/evs-x64-swx-windows-dynamic/include
## 1>===AVCODEC_LIBRARY===========>C:/bld/bofstd/vcpkg_installed/evs-x64-swx-windows-dynamic/debug/lib/avcodec.lib