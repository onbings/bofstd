include(CMakeFindDependencyMacro)

macro(find_package_dependency)

  # When loading the *Config.cmake we should
  # call find_dependency which is just a wrapper
  # around find_package to display better
  # messages to the user. When directly dealing
  # with our CMakeLists.txt, we should call
  # find_package directly
  if(FROM_CONFIG_FILE)
     find_dependency(${ARGN})
  else()
     find_package(${ARGN})
  endif()

endmacro()

# =========================
# == PUBLIC DEPENDENCIES ==
# =========================

# if(NOT TARGET ONBINGS::onbings-somelib)
#   find_package_dependency(onbings-somelib REQUIRED)
# endif()

# ==========================
# == PRIVATE DEPENDENCIES ==
# ==========================

#find_package_dependency(Qt5 REQUIRED Core Gui Widgets)

# if(NOT TARGET ONBINGS::onbings-anotherlib)
#   find_package_dependency(onbings-anotherlib REQUIRED)
# endif()

if(NOT TARGET jsoncpp_object)
  find_package_dependency(jsoncpp REQUIRED)

  if(TARGET jsoncpp_lib)
    add_library(jsoncpp::jsoncpp ALIAS jsoncpp_lib)
  elseif(TARGET jsoncpp_static)
    add_library(jsoncpp::jsoncpp ALIAS jsoncpp_static)
  else()
    message(FATAL_ERROR "Unknown target for jsoncpp")
  endif()
endif()

if(NOT TARGET spdlog)
  find_package_dependency(spdlog REQUIRED)
endif()

if(NOT TARGET fmt)
  find_package_dependency(fmt REQUIRED)
endif()

if(NOT TARGET ZeroMQ)
  find_package_dependency(ZeroMQ REQUIRED)
endif()

if(NOT TARGET czmq)
  find_package_dependency(czmq REQUIRED)
endif()

#if(NOT TARGET linenoise-ng)
#  find_package_dependency(linenoise-ng REQUIRED)
#endif()

if(NOT TARGET libyuv)
  find_package_dependency(libyuv REQUIRED)
endif()

if(NOT TARGET ZLIB)
  find_package_dependency(ZLIB REQUIRED)
endif()

if(NOT TARGET ZenLib)
  find_package_dependency(ZenLib REQUIRED)
endif()

if(NOT TARGET OpenSSL)
  find_package_dependency(OpenSSL REQUIRED)
endif()

if(NOT TARGET MediaInfoLib)
  find_package_dependency(MediaInfoLib REQUIRED)
endif()

if(NOT TARGET date)
  find_package_dependency(date REQUIRED)
endif()
#>    find_package(date CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE date::date date::date-tz)

#>The package zeromq provides CMake targets:
#>
#>    find_package(ZeroMQ CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE libzmq libzmq-static)
#>
#>The package czmq provides CMake targets:
#>
#>    find_package(czmq CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE czmq czmq-static)
#>
#>The package date provides CMake targets:
#>
#>    find_package(date CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE date::date date::date-tz)
#>
#>The package fmt provides CMake targets:
#>
#>    find_package(fmt CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE fmt::fmt)
#>
#>    # Or use the header-only version
#>    find_package(fmt CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE fmt::fmt-header-only)
#>
#>The package gtest provides CMake targets:
#>
#>    find_package(GTest CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE GTest::gmock GTest::gtest GTest::gmock_main GTest::gtest_main)
#>
#>The package jsoncpp provides CMake targets:
#>
#>    find_package(jsoncpp CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE jsoncpp_lib jsoncpp_object JsonCpp::JsonCpp)
#>
#>The package zlib is compatible with built-in CMake targets:
#>
#>    find_package(ZLIB REQUIRED)
#>    target_link_libraries(main PRIVATE ZLIB::ZLIB)
#>
#>The package libzen provides CMake targets:
#>
#>    find_package(ZenLib CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE zen)
#>
#>The package libmediainfo provides CMake targets:
#>
#>    find_package(MediaInfoLib CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE mediainfo)
#>
#>The package libyuv provides CMake targets:
#>
#>    find_package(libyuv CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE yuv)
#>
#>The package openssl is compatible with built-in CMake targets:
#>
#>    find_package(OpenSSL REQUIRED)
#>    target_link_libraries(main PRIVATE OpenSSL::SSL OpenSSL::Crypto)
#>
#>The package spdlog provides CMake targets:
#>
#>    find_package(spdlog CONFIG REQUIRED)
#>    target_link_libraries(main PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
#>
